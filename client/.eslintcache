[{"/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/index.js":"1","/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/App.js":"2","/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/redux/store.js":"3","/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/redux/postSlice.js":"4","/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/redux/userSlice.js":"5","/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/Cards/Video/Video.jsx":"6","/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/components/Home/Home.jsx":"7","/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/components/Navbar/Navbar.jsx":"8","/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/components/Navbar/LeftNav.jsx":"9","/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/Cards/Post/Post.jsx":"10","/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/firebase.js":"11"},{"size":539,"mtime":1682134931136,"results":"12","hashOfConfig":"13"},{"size":483,"mtime":1682134931120,"results":"14","hashOfConfig":"13"},{"size":854,"mtime":1682134931136,"results":"15","hashOfConfig":"13"},{"size":657,"mtime":1682134931136,"results":"16","hashOfConfig":"13"},{"size":962,"mtime":1682134931136,"results":"17","hashOfConfig":"13"},{"size":2395,"mtime":1682263335140,"results":"18","hashOfConfig":"13"},{"size":786,"mtime":1682175145280,"results":"19","hashOfConfig":"13"},{"size":4770,"mtime":1682228086053,"results":"20","hashOfConfig":"13"},{"size":5359,"mtime":1682267168771,"results":"21","hashOfConfig":"13"},{"size":2937,"mtime":1682263589333,"results":"22","hashOfConfig":"13"},{"size":440,"mtime":1682134931136,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1yrtzq6",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/index.js",[],["49","50"],"/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/App.js",[],"/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/redux/store.js",[],"/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/redux/postSlice.js",[],"/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/redux/userSlice.js",[],"/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/Cards/Video/Video.jsx",["51","52"],"import axios from 'axios'\nimport './video.css'\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch } from 'react-redux'\nimport { postRequest, postSuccess } from '../../redux/postSlice';\nimport React, { useEffect, useState } from 'react'\nimport Navbar from '../../components/Navbar/Navbar';\nimport LeftNav from '../../components/Navbar/LeftNav';\nimport { Button, Dialog, DialogActions, DialogContent } from '@mui/material';\n\nconst Video = () => {\n\n  const { user } = useSelector((state) => state.user)\n  const { currentPost } = useSelector((state) => state.postx)\n  const dispatch = useDispatch()\n\n  const path = useLocation().pathname.split(\"/\")[2]\n  const [channel, setChannel] = useState({})\n\n  const [open, setOpen] = useState(false)\n\n  const OpenVideo = () => {\n    setOpen(true)\n  }\n\n  const closee = () => {\n    setOpen(false)\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      console.log(\"jj\")\n      dispatch(postRequest())\n      console.log(\"jj1\")\n      try {\n        const videoRes = await axios.get(`/posts/find/${path}`) //to get video from the postid\n        console.log(\"jj2\")\n        const channelRes = await axios.get(`/users/find/${videoRes.data.userId}`)  //to get the channel data\n        console.log(\"jj3\")\n        setChannel(channelRes.data)\n        dispatch(postSuccess(videoRes.data))\n      } catch (error) {\n\n      }\n    }\n    fetchData()\n  }, [path, dispatch])\n\n  return (\n    <div>\n      <Navbar />\n\n      <div className='videoPage'>\n        <div className='navbar-video'>\n          <LeftNav />\n        </div>\n\n        <div className='video-feed' >\n\n        <div onClick={OpenVideo}>\n          <img src={currentPost.imgUrl} width={400} />\n        </div>\n\n\n        <div className=''>\n\n          <h3>\n            {currentPost && currentPost.title}\n          </h3>\n          <p>{currentPost.desc}</p>\n          <h6>\n            posted by:  {channel.name}\n          </h6>\n        </div>\n\n        </div>\n\n\n      </div>\n\n      <Dialog open={open} onClose={closee}>\n        <DialogActions>\n          <Button onClick={closee} variant='outlined'>close</Button>\n        </DialogActions>\n        <DialogContent>\n          <video width=\"500px\" controls>\n            <source src={currentPost && currentPost.videoUrl} type=\"video/mp4\" />\n          </video>\n\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default Video","/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/components/Home/Home.jsx",[],"/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/components/Navbar/Navbar.jsx",[],"/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/components/Navbar/LeftNav.jsx",[],"/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/Cards/Post/Post.jsx",["53","54","55"],"import React, { useEffect, useState } from 'react'\nimport { Link } from \"react-router-dom\"\nimport \"./Post.css\"\nimport axios from 'axios'\nimport moment from 'moment'\nimport { Accordion, AccordionDetails, AccordionSummary, Dialog, DialogActions, DialogContent } from '@mui/material'\nimport ExpandMore from '@mui/icons-material/ExpandMore'\nimport PlayCircleFilledWhiteIcon from '@mui/icons-material/PlayCircleFilledWhite';\n\nconst Post = ({ post }) => {\n\n    const [channel, setChannel] = React.useState({})\n    const [open, setOpen] = useState(false)\n\n    const clickMe = () => {\n        setOpen(true)\n    }\n\n    const handleClose = () => {\n        setOpen(false)\n    }\n\n    useEffect(() => {\n        const fetchChannel = async () => {\n            const res = await axios.get(`/posts/find/${post.userId}`)\n            setChannel(res.data)\n        }\n        fetchChannel()\n    }, [post.userId])\n\n\n    return (\n        <div>\n\n\n            <div className='post'>\n                <div className='container'>\n                    {/* <Link to={`/posts/${post._id}`} > */}\n                    <div className='thumbnail post-thumbnail'>\n                        <img src={post.imgUrl} alt='thumbnail' className='thumbimg' />\n                    </div>\n\n\n\n                    {/* </Link> */}\n                    <div>\n                        <p onClick={clickMe} className='play'><PlayCircleFilledWhiteIcon fontSize='large' /></p>\n\n                        <Accordion className=\"post2\">\n                            <AccordionSummary className='post-title' expandIcon={<ExpandMore />}>\n                                <h3>{post.title}</h3>\n\n                            </AccordionSummary>\n                            <AccordionDetails className='post-content'>\n                                <p>{post.desc}</p>\n                                {/* <ul> Tags: <li>{post.tags}</li></ul> */}\n                                \n                        <p className='dialog-updated'>{moment(post.createdAt).fromNow()} </p>\n                            </AccordionDetails>\n                        </Accordion>\n\n\n                        <Dialog open={open} onClose={handleClose}>\n                            <div className=\"dialog-title\">{post.title}</div>\n                            <div className=\"dialog-close\" onClick={handleClose}>X</div>\n                            <DialogContent>\n                                <video className=\"dialog-video\" controls width={500}>\n                                    <source src={post.videoUrl} />\n                                </video>\n                                <div className=\"dialog-desc\">{post.desc}</div>\n                                <div className=\"dialog-updated\">{moment(post.updatedAt).calendar()}</div>\n                            </DialogContent>\n                        </Dialog>\n\n\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Post","/home/sagar/Documents/MERN-Projects/E-Learning/E-Learning_dev/client/src/firebase.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":13,"column":11,"nodeType":"62","messageId":"63","endLine":13,"endColumn":15},{"ruleId":"64","severity":1,"message":"65","line":61,"column":11,"nodeType":"66","endLine":61,"endColumn":55},{"ruleId":"60","severity":1,"message":"67","line":2,"column":10,"nodeType":"62","messageId":"63","endLine":2,"endColumn":14},{"ruleId":"60","severity":1,"message":"68","line":6,"column":65,"nodeType":"62","messageId":"63","endLine":6,"endColumn":78},{"ruleId":"60","severity":1,"message":"69","line":12,"column":12,"nodeType":"62","messageId":"63","endLine":12,"endColumn":19},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Link' is defined but never used.","'DialogActions' is defined but never used.","'channel' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]