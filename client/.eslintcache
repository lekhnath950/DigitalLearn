[{"E:\\E-learning\\client\\src\\index.js":"1","E:\\E-learning\\client\\src\\App.js":"2","E:\\E-learning\\client\\src\\components\\Home\\Home.jsx":"3","E:\\E-learning\\client\\src\\components\\Navbar\\Navbar.jsx":"4","E:\\E-learning\\client\\src\\Cards\\Post\\Post.jsx":"5","E:\\E-learning\\client\\src\\firebase.js":"6","E:\\E-learning\\client\\src\\components\\Navbar\\LeftNav.jsx":"7","E:\\E-learning\\client\\src\\Cards\\Video\\Video.jsx":"8","E:\\E-learning\\client\\src\\redux\\store.js":"9","E:\\E-learning\\client\\src\\redux\\userSlice.js":"10","E:\\E-learning\\client\\src\\redux\\postSlice.js":"11","E:\\E-learning\\client\\src\\components\\Upload\\Upload.jsx":"12","E:\\E-learning\\client\\src\\components\\Category\\Category.jsx":"13","E:\\E-learning\\client\\src\\components\\Fav.jsx":"14"},{"size":539,"mtime":1681225612898,"results":"15","hashOfConfig":"16"},{"size":831,"mtime":1683533837621,"results":"17","hashOfConfig":"16"},{"size":1303,"mtime":1683367326136,"results":"18","hashOfConfig":"16"},{"size":4934,"mtime":1682303829994,"results":"19","hashOfConfig":"16"},{"size":1308,"mtime":1683443177173,"results":"20","hashOfConfig":"16"},{"size":460,"mtime":1681115568294,"results":"21","hashOfConfig":"16"},{"size":4093,"mtime":1683535285977,"results":"22","hashOfConfig":"16"},{"size":3054,"mtime":1683530352036,"results":"23","hashOfConfig":"16"},{"size":881,"mtime":1681448687312,"results":"24","hashOfConfig":"16"},{"size":999,"mtime":1681880364832,"results":"25","hashOfConfig":"16"},{"size":686,"mtime":1681233930444,"results":"26","hashOfConfig":"16"},{"size":4646,"mtime":1683370064724,"results":"27","hashOfConfig":"16"},{"size":1253,"mtime":1683442616959,"results":"28","hashOfConfig":"16"},{"size":965,"mtime":1683534563915,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"n9iizf",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\E-learning\\client\\src\\index.js",[],["61","62"],"E:\\E-learning\\client\\src\\App.js",[],"E:\\E-learning\\client\\src\\components\\Home\\Home.jsx",[],"E:\\E-learning\\client\\src\\components\\Navbar\\Navbar.jsx",[],"E:\\E-learning\\client\\src\\Cards\\Post\\Post.jsx",["63","64","65"],"import React, { useEffect, useState } from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport \"./Post.css\"\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\r\n\r\n\r\nconst Post = ({ post }) => {\r\n\r\n    const [channel, setChannel] = React.useState({})\r\n\r\n    useEffect(() => {\r\n        const fetchChannel = async () => {\r\n            const res = await axios.get(`/posts/find/${post.userId}`)\r\n            setChannel(res.data)\r\n        }\r\n        fetchChannel()\r\n    }, [post.userId])\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n\r\n            <div className='post'>\r\n                <div className='abb'>\r\n                    <div className='imggg'>\r\n                    <Link to={`/posts/${post._id}`} >\r\n                        <img src={post.imgUrl} alt=\"\" height={200} />\r\n                    </Link>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <h3>{post.title}</h3>\r\n                        <p>{post.desc}</p>\r\n                    </div>\r\n\r\n                    <div className='iii'>\r\n                    <FavoriteBorderIcon />\r\n                    <p>{post.likes.length}</p>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","E:\\E-learning\\client\\src\\firebase.js",[],"E:\\E-learning\\client\\src\\components\\Navbar\\LeftNav.jsx",[],"E:\\E-learning\\client\\src\\Cards\\Video\\Video.jsx",["66","67"],"E:\\E-learning\\client\\src\\redux\\store.js",[],"E:\\E-learning\\client\\src\\redux\\userSlice.js",[],"E:\\E-learning\\client\\src\\redux\\postSlice.js",[],"E:\\E-learning\\client\\src\\components\\Upload\\Upload.jsx",["68"],"import React, { useEffect, useState } from 'react'\r\nimport './Upload.css'\r\nimport { useSelector } from 'react-redux'\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material'\r\nimport app from '../../firebase';\r\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\nimport axios from 'axios';\r\n\r\n\r\nconst Upload = () => {\r\n\r\n    const [dialog, setDialog] = useState(false)\r\n    const [vid, setVid] = useState(undefined)\r\n    const [img, setImg] = useState(undefined)\r\n    const [imgPer, setImgPer] = useState(0)\r\n    const [vidPer, setVidPer] = useState(0)\r\n    const [tags, setTags] = useState([])\r\n    const [inputs, setInputs] = useState({})\r\n\r\n    const { user } = useSelector(state => state.user)\r\n\r\n    const Tag = (e) => {\r\n        setTags(e.target.value.split(\",\"))\r\n    }\r\n\r\n\r\n    const handleInputs = (e) => {\r\n        setInputs((prev) => {\r\n            return { ...prev, [e.target.name]: e.target.value }\r\n        })\r\n    }\r\n\r\n    const upload = (file, urlType) => {\r\n        const storage = getStorage(app);\r\n        const fileName = new Date().getTime() + file.name;\r\n        const storageRef = ref(storage, fileName);\r\n        const uploadTask = uploadBytesResumable(storageRef, file);\r\n\r\n        uploadTask.on('state_changed',\r\n            (snapshot) => {\r\n                const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                urlType === \"imgUrl\" ? setImgPer(Math.round(progress)) : setVidPer(Math.round(progress))\r\n                switch (snapshot.state) {\r\n                    case 'paused':\r\n                        console.log('Upload is paused');\r\n                        break;\r\n                    case 'running':\r\n                        console.log('Upload is running');\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            },\r\n            (error) => { },\r\n\r\n            () => {\r\n                getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n                    setInputs((prev) => {\r\n                        return { ...prev, [urlType]: downloadURL }\r\n                    })\r\n                    console.log(\"getdownloadurl\")\r\n                });\r\n            }\r\n        );\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        vid && upload(vid, \"videoUrl\");\r\n    }, [vid])\r\n\r\n    useEffect(() => {\r\n        img && upload(img, \"imgUrl\");\r\n    }, [img])\r\n\r\n    const handleUpload = async (e) => {\r\n        e.preventDefault();\r\n        const data = {\r\n            ...inputs, tags,\r\n            imgUrl: inputs.imgUrl,\r\n            videoUrl: inputs.videoUrl\r\n        }\r\n        const res = await axios.post(\"/posts\", data)\r\n        res.status === 200 && console.log(res.data)\r\n        setDialog(false);\r\n        console.log(\"inputs\")\r\n    }\r\n\r\n\r\n    const DialogBox = () => {\r\n        setDialog(true)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setDialog(false)\r\n    }\r\n\r\n  return (\r\n    <div>\r\n\r\n        <button onClick={DialogBox}>click </button>\r\n\r\n\r\n        <Dialog open={dialog} onClose={handleClose}>\r\n                <DialogActions>\r\n                    <Button variant='outlined' onClick={handleClose}>close</Button>\r\n                </DialogActions>\r\n                <DialogTitle>Upload</DialogTitle>\r\n                <DialogContent>\r\n                    <form>\r\n                        <input type=\"text\" placeholder=\"Title\" name='title' onChange={handleInputs} /><br />\r\n                        <p>Choose a Video</p>\r\n                        {\r\n                            vidPer > 0 ? (\"uploading\" + vidPer + \"%\") : (\r\n                                <input type=\"file\" accept='video/*' placeholder='Video' onChange={(e) => setVid(e.target.files[0])} />\r\n                            )\r\n                        }   <br />\r\n                        <input type=\"text\" placeholder='description' name=\"desc\" onChange={handleInputs} /> <br />\r\n                        <input type=\"text\" placeholder=\"tags\" onChange={Tag} /><br />\r\n                        <p>Choose a Thumbnail</p>\r\n                        {\r\n                            imgPer > 0 ? (\"uploading..\" + imgPer + \"%\") : (\r\n                                <input type=\"file\" accept='image/*' placeholder=\"thumbnail\" onChange={(e) => setImg(e.target.files[0])} />\r\n\r\n                            )\r\n                        } <br />\r\n                        <Button variant='outlined' onClick={handleUpload} >Upload</Button><br />\r\n                    </form>\r\n                </DialogContent>\r\n            </Dialog>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Upload","E:\\E-learning\\client\\src\\components\\Category\\Category.jsx",[],"E:\\E-learning\\client\\src\\components\\Fav.jsx",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":1,"column":28,"nodeType":"75","messageId":"76","endLine":1,"endColumn":36},{"ruleId":"73","severity":1,"message":"77","line":5,"column":8,"nodeType":"75","messageId":"76","endLine":5,"endColumn":14},{"ruleId":"73","severity":1,"message":"78","line":11,"column":12,"nodeType":"75","messageId":"76","endLine":11,"endColumn":19},{"ruleId":"73","severity":1,"message":"79","line":14,"column":11,"nodeType":"75","messageId":"76","endLine":14,"endColumn":15},{"ruleId":"80","severity":1,"message":"81","line":75,"column":11,"nodeType":"82","endLine":75,"endColumn":70},{"ruleId":"73","severity":1,"message":"79","line":20,"column":13,"nodeType":"75","messageId":"76","endLine":20,"endColumn":17},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'moment' is defined but never used.","'channel' is assigned a value but never used.","'user' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]