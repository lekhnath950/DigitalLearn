[{"E:\\E-learning\\client\\src\\index.js":"1","E:\\E-learning\\client\\src\\App.js":"2","E:\\E-learning\\client\\src\\components\\Home\\Home.jsx":"3","E:\\E-learning\\client\\src\\components\\Navbar\\Navbar.jsx":"4","E:\\E-learning\\client\\src\\Cards\\Post\\Post.jsx":"5","E:\\E-learning\\client\\src\\firebase.js":"6","E:\\E-learning\\client\\src\\components\\Navbar\\LeftNav.jsx":"7","E:\\E-learning\\client\\src\\Cards\\Video\\Video.jsx":"8","E:\\E-learning\\client\\src\\redux\\store.js":"9","E:\\E-learning\\client\\src\\redux\\userSlice.js":"10","E:\\E-learning\\client\\src\\redux\\postSlice.js":"11","E:\\E-learning\\client\\src\\components\\Upload\\Upload.jsx":"12"},{"size":539,"mtime":1681225612898,"results":"13","hashOfConfig":"14"},{"size":617,"mtime":1683385168131,"results":"15","hashOfConfig":"14"},{"size":1303,"mtime":1683367326136,"results":"16","hashOfConfig":"14"},{"size":4934,"mtime":1682303829994,"results":"17","hashOfConfig":"14"},{"size":1259,"mtime":1683384746933,"results":"18","hashOfConfig":"14"},{"size":460,"mtime":1681115568294,"results":"19","hashOfConfig":"14"},{"size":2643,"mtime":1683384823188,"results":"20","hashOfConfig":"14"},{"size":2530,"mtime":1683384658602,"results":"21","hashOfConfig":"14"},{"size":881,"mtime":1681448687312,"results":"22","hashOfConfig":"14"},{"size":999,"mtime":1681880364832,"results":"23","hashOfConfig":"14"},{"size":686,"mtime":1681233930444,"results":"24","hashOfConfig":"14"},{"size":4646,"mtime":1683370064724,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"n9iizf",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},"E:\\E-learning\\client\\src\\index.js",[],["53","54"],"E:\\E-learning\\client\\src\\App.js",[],"E:\\E-learning\\client\\src\\components\\Home\\Home.jsx",[],"E:\\E-learning\\client\\src\\components\\Navbar\\Navbar.jsx",[],"E:\\E-learning\\client\\src\\Cards\\Post\\Post.jsx",["55","56","57"],"E:\\E-learning\\client\\src\\firebase.js",[],"E:\\E-learning\\client\\src\\components\\Navbar\\LeftNav.jsx",[],"E:\\E-learning\\client\\src\\Cards\\Video\\Video.jsx",["58","59"],"import axios from 'axios'\r\nimport './video.css'\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { postRequest, postSuccess } from '../../redux/postSlice';\r\nimport React, { useEffect, useState } from 'react'\r\nimport Navbar from '../../components/Navbar/Navbar';\r\nimport LeftNav from '../../components/Navbar/LeftNav';\r\n\r\nimport { Button, Dialog, DialogActions, DialogContent } from '@mui/material';\r\n\r\n\r\nconst Video = () => {\r\n\r\n  const { user } = useSelector((state) => state.user)\r\n  const { currentPost } = useSelector((state) => state.postx)\r\n  const dispatch = useDispatch()\r\n\r\n  const path = useLocation().pathname.split(\"/\")[2]\r\n  const [channel, setChannel] = useState({})\r\n\r\n  const [open, setOpen] = useState(false)\r\n\r\n  const OpenVideo = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const closee = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      console.log(\"jj\")\r\n      dispatch(postRequest())\r\n      console.log(\"jj1\")\r\n      try {\r\n        const videoRes = await axios.get(`/posts/find/${path}`) //to get video from the postid\r\n        console.log(\"jj2\")\r\n        const channelRes = await axios.get(`/users/find/${videoRes.data.userId}`)  //to get the channel data\r\n        console.log(\"jj3\")\r\n        setChannel(channelRes.data)\r\n        dispatch(postSuccess(videoRes.data))\r\n      } catch (error) {\r\n\r\n      }\r\n    }\r\n    fetchData()\r\n  }, [path, dispatch])\r\n\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n\r\n      <div className='videoPage'>\r\n        <div className='navbar-video'>\r\n          <LeftNav />\r\n        </div>\r\n\r\n\r\n        <div className='video-feed' >\r\n\r\n\r\n        <div onClick={OpenVideo}>\r\n          <img src={ currentPost && currentPost.imgUrl} width={400} />\r\n        </div>\r\n\r\n\r\n        <div className=''>\r\n\r\n          <h3>\r\n            {currentPost && currentPost.title}\r\n          </h3>\r\n          <p>{currentPost && currentPost.desc}</p>\r\n          <h6>\r\n            posted by:  {channel.name}\r\n          </h6>\r\n        </div>\r\n\r\n        </div>\r\n\r\n\r\n      </div>\r\n\r\n      <Dialog open={open} onClose={closee}>\r\n\r\n        <DialogActions>\r\n          <Button onClick={closee} variant='outlined'>close</Button>\r\n        </DialogActions>\r\n        <DialogContent>\r\n          <video width=\"500px\" controls>\r\n\r\n            <source src={currentPost && currentPost.videoUrl} type=\"video/mp4\" />\r\n          </video>\r\n\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Video","E:\\E-learning\\client\\src\\redux\\store.js",[],"E:\\E-learning\\client\\src\\redux\\userSlice.js",[],"E:\\E-learning\\client\\src\\redux\\postSlice.js",[],"E:\\E-learning\\client\\src\\components\\Upload\\Upload.jsx",["60"],"import React, { useEffect, useState } from 'react'\r\nimport './Upload.css'\r\nimport { useSelector } from 'react-redux'\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material'\r\nimport app from '../../firebase';\r\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\nimport axios from 'axios';\r\n\r\n\r\nconst Upload = () => {\r\n\r\n    const [dialog, setDialog] = useState(false)\r\n    const [vid, setVid] = useState(undefined)\r\n    const [img, setImg] = useState(undefined)\r\n    const [imgPer, setImgPer] = useState(0)\r\n    const [vidPer, setVidPer] = useState(0)\r\n    const [tags, setTags] = useState([])\r\n    const [inputs, setInputs] = useState({})\r\n\r\n    const { user } = useSelector(state => state.user)\r\n\r\n    const Tag = (e) => {\r\n        setTags(e.target.value.split(\",\"))\r\n    }\r\n\r\n\r\n    const handleInputs = (e) => {\r\n        setInputs((prev) => {\r\n            return { ...prev, [e.target.name]: e.target.value }\r\n        })\r\n    }\r\n\r\n    const upload = (file, urlType) => {\r\n        const storage = getStorage(app);\r\n        const fileName = new Date().getTime() + file.name;\r\n        const storageRef = ref(storage, fileName);\r\n        const uploadTask = uploadBytesResumable(storageRef, file);\r\n\r\n        uploadTask.on('state_changed',\r\n            (snapshot) => {\r\n                const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                urlType === \"imgUrl\" ? setImgPer(Math.round(progress)) : setVidPer(Math.round(progress))\r\n                switch (snapshot.state) {\r\n                    case 'paused':\r\n                        console.log('Upload is paused');\r\n                        break;\r\n                    case 'running':\r\n                        console.log('Upload is running');\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            },\r\n            (error) => { },\r\n\r\n            () => {\r\n                getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n                    setInputs((prev) => {\r\n                        return { ...prev, [urlType]: downloadURL }\r\n                    })\r\n                    console.log(\"getdownloadurl\")\r\n                });\r\n            }\r\n        );\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        vid && upload(vid, \"videoUrl\");\r\n    }, [vid])\r\n\r\n    useEffect(() => {\r\n        img && upload(img, \"imgUrl\");\r\n    }, [img])\r\n\r\n    const handleUpload = async (e) => {\r\n        e.preventDefault();\r\n        const data = {\r\n            ...inputs, tags,\r\n            imgUrl: inputs.imgUrl,\r\n            videoUrl: inputs.videoUrl\r\n        }\r\n        const res = await axios.post(\"/posts\", data)\r\n        res.status === 200 && console.log(res.data)\r\n        setDialog(false);\r\n        console.log(\"inputs\")\r\n    }\r\n\r\n\r\n    const DialogBox = () => {\r\n        setDialog(true)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setDialog(false)\r\n    }\r\n\r\n  return (\r\n    <div>\r\n\r\n        <button onClick={DialogBox}>click </button>\r\n\r\n\r\n        <Dialog open={dialog} onClose={handleClose}>\r\n                <DialogActions>\r\n                    <Button variant='outlined' onClick={handleClose}>close</Button>\r\n                </DialogActions>\r\n                <DialogTitle>Upload</DialogTitle>\r\n                <DialogContent>\r\n                    <form>\r\n                        <input type=\"text\" placeholder=\"Title\" name='title' onChange={handleInputs} /><br />\r\n                        <p>Choose a Video</p>\r\n                        {\r\n                            vidPer > 0 ? (\"uploading\" + vidPer + \"%\") : (\r\n                                <input type=\"file\" accept='video/*' placeholder='Video' onChange={(e) => setVid(e.target.files[0])} />\r\n                            )\r\n                        }   <br />\r\n                        <input type=\"text\" placeholder='description' name=\"desc\" onChange={handleInputs} /> <br />\r\n                        <input type=\"text\" placeholder=\"tags\" onChange={Tag} /><br />\r\n                        <p>Choose a Thumbnail</p>\r\n                        {\r\n                            imgPer > 0 ? (\"uploading..\" + imgPer + \"%\") : (\r\n                                <input type=\"file\" accept='image/*' placeholder=\"thumbnail\" onChange={(e) => setImg(e.target.files[0])} />\r\n\r\n                            )\r\n                        } <br />\r\n                        <Button variant='outlined' onClick={handleUpload} >Upload</Button><br />\r\n                    </form>\r\n                </DialogContent>\r\n            </Dialog>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Upload",{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":1,"column":28,"nodeType":"67","messageId":"68","endLine":1,"endColumn":36},{"ruleId":"65","severity":1,"message":"69","line":5,"column":8,"nodeType":"67","messageId":"68","endLine":5,"endColumn":14},{"ruleId":"65","severity":1,"message":"70","line":11,"column":12,"nodeType":"67","messageId":"68","endLine":11,"endColumn":19},{"ruleId":"65","severity":1,"message":"71","line":15,"column":11,"nodeType":"67","messageId":"68","endLine":15,"endColumn":15},{"ruleId":"72","severity":1,"message":"73","line":65,"column":11,"nodeType":"74","endLine":65,"endColumn":71},{"ruleId":"65","severity":1,"message":"71","line":20,"column":13,"nodeType":"67","messageId":"68","endLine":20,"endColumn":17},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'moment' is defined but never used.","'channel' is assigned a value but never used.","'user' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]